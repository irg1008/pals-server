// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"irg1008/pals/ent/userdata"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserData is the model entity for the UserData schema.
type UserData struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// User ID from auth service. Prefixed with email, google, etc
	AuthID string `json:"authId"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Picture holds the value of the "picture" field.
	Picture string `json:"picture,omitempty"`
	// Role holds the value of the "role" field.
	Role userdata.Role `json:"role,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"-"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userdata.FieldID:
			values[i] = new(sql.NullInt64)
		case userdata.FieldAuthID, userdata.FieldName, userdata.FieldEmail, userdata.FieldPicture, userdata.FieldRole:
			values[i] = new(sql.NullString)
		case userdata.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserData fields.
func (ud *UserData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userdata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ud.ID = int(value.Int64)
		case userdata.FieldAuthID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_id", values[i])
			} else if value.Valid {
				ud.AuthID = value.String
			}
		case userdata.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ud.Name = value.String
			}
		case userdata.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ud.Email = value.String
			}
		case userdata.FieldPicture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field picture", values[i])
			} else if value.Valid {
				ud.Picture = value.String
			}
		case userdata.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				ud.Role = userdata.Role(value.String)
			}
		case userdata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ud.CreatedAt = value.Time
			}
		default:
			ud.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserData.
// This includes values selected through modifiers, order, etc.
func (ud *UserData) Value(name string) (ent.Value, error) {
	return ud.selectValues.Get(name)
}

// Update returns a builder for updating this UserData.
// Note that you need to call UserData.Unwrap() before calling this method if this UserData
// was returned from a transaction, and the transaction was committed or rolled back.
func (ud *UserData) Update() *UserDataUpdateOne {
	return NewUserDataClient(ud.config).UpdateOne(ud)
}

// Unwrap unwraps the UserData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ud *UserData) Unwrap() *UserData {
	_tx, ok := ud.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserData is not a transactional entity")
	}
	ud.config.driver = _tx.drv
	return ud
}

// String implements the fmt.Stringer.
func (ud *UserData) String() string {
	var builder strings.Builder
	builder.WriteString("UserData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ud.ID))
	builder.WriteString("auth_id=")
	builder.WriteString(ud.AuthID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ud.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(ud.Email)
	builder.WriteString(", ")
	builder.WriteString("picture=")
	builder.WriteString(ud.Picture)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", ud.Role))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ud.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserDataSlice is a parsable slice of UserData.
type UserDataSlice []*UserData
